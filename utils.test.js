const utils = require("./utils.js")

const assert = require("node:assert/strict")

assert.deepEqual(utils.parsePath('a.b[0]["a\\\\\\""].x'), ['a','b',0,'a\\"','x'])
assert.deepEqual(utils.parsePath('[0]'), [0])
assert.deepEqual(utils.parsePath(''), [])
assert.deepEqual(utils.parsePath('a'), ['a'])
assert.deepEqual(utils.parsePath('a[0]'), ['a', 0])
assert.deepEqual(utils.parsePath('["b"]'), ['b'])
assert.deepEqual(utils.parsePath('["b]'), undefined)
assert.deepEqual(utils.parsePath('[b]'), undefined)
assert.deepEqual(utils.parsePath('[b"]'), undefined)
assert.deepEqual(utils.parsePath('[b'), undefined)
assert.deepEqual(utils.parsePath('b]'), undefined)
assert.deepEqual(utils.parsePath('[[b]]'), undefined)
assert.deepEqual(utils.parsePath('.a'), undefined)
assert.deepEqual(utils.parsePath('a.[0]'), undefined)
assert.deepEqual(utils.parsePath('a.'), undefined)

assert.deepEqual(utils.getPath({ "1": "a" }, []), { "1": "a" })
assert.deepEqual(utils.getPath({ "1": "a" }, [1]), "a")
assert.deepEqual(utils.getPath({ x: "b" }, ["x"]), "b")
assert.deepEqual(utils.getPath({ y: ["a", "b", "c"] }, ["y", "2"]), "c")
assert.deepEqual(utils.getPath({ y: ["a", "b", "c"] }, ["y", 2]), "c")
assert.deepEqual(utils.getPath({ x: "b" }, ["x"]), "b")
assert.deepEqual(utils.getPath({ x: "b" }, ["y"]), undefined)
assert.deepEqual(utils.getPath({ x: "b" }, ["x", "y"]), undefined)
assert.deepEqual(utils.getPath("a", ["y"]), undefined)
assert.deepEqual(utils.getPath("a", [0]), undefined)
assert.deepEqual(utils.getPath("a", ["length"]), undefined)
assert.deepEqual(utils.getPath(undefined, ["length"]), undefined)
assert.deepEqual(utils.getPath("a", []), "a")

assert.deepEqual(utils.setPath(3, [], 4), 4)
assert.deepEqual(utils.setPath([1,2,3], [1], 4), [1,4,3])
assert.deepEqual(utils.setPath({ x: "b" }, ["x", "y"], 3), { x: { y: 3 } })
assert.deepEqual(utils.setPath({ x: { z: 4 } }, ["x", "y"], 3), { x: { y: 3, z: 4 } })
//assert.deepEqual(utils.setPath({ x: [3] }, ["x", "y"], 4), { x: [3, y: 4] }) //???
assert.deepEqual(utils.setPath({ x: [3] }, ["x", "y"], 4, true), { x: { y: 4} })
assert.deepEqual(utils.setPath({ x: { a: 3 } }, ["x", 0], 4), { x: { a: 3, ["0"]: 4} })
assert.deepEqual(utils.setPath({ x: { a: 3 } }, ["x", 0], 4, true), { x: [4] })
const arrWithoutIndex0 = []
arrWithoutIndex0[1] = 4
assert.deepEqual(utils.setPath({ x: { a: 3 } }, ["x", 1], 4, true), { x: arrWithoutIndex0 })
assert.deepEqual(utils.setPath({ x: { a: 3 } }, ["x", 0], 4, true), { x: [4] })
assert.deepEqual(utils.setPath(undefined, ["x", 0], 4, true), { x: [4] })

assert.deepEqual(utils.matchPath([], []), true)
assert.deepEqual(utils.matchPath(["a", "b"], ["a", "b"]), true)
assert.deepEqual(utils.matchPath(["a", "b"], ["*", "*"]), true)
assert.deepEqual(utils.matchPath([1, "0"], [1, 0]), true)
assert.deepEqual(utils.matchPath([1, "0"], ["1", "0"]), true)
assert.deepEqual(utils.matchPath([1, "0"], ["*", "*"]), true)
assert.deepEqual(utils.matchPath([1, "0", ""], ["*", "*"]), false)
assert.deepEqual(utils.matchPath([1, "0"], ["*", "*", "*"]), false)
assert.deepEqual(utils.matchPath([1, "0"], [0, "0"]), false)
assert.deepEqual(utils.matchPath([1, "1"], [1, "0"]), false)
assert.deepEqual(utils.matchPath([1, "0"], ["0", "0"]), false)
assert.deepEqual(utils.matchPath([1, "1"], [1, 0]), false)

assert.deepEqual(utils.stripMatchingElements({ a: "3" }, []), { a: "3" })
assert.deepEqual(utils.stripMatchingElements([1, 2, 3], []), [1, 2, 3])
assert.deepEqual(utils.stripMatchingElements({ a: "3" }, [[]]), undefined)
assert.deepEqual(utils.stripMatchingElements([1, 2, 3], [[]]), undefined)
assert.deepEqual(utils.stripMatchingElements("", [[]]), undefined)
assert.deepEqual(utils.stripMatchingElements("a", [[1]]), "a")
assert.deepEqual(utils.stripMatchingElements({ a: "3" }, [["1"]]), { a: "3" })
assert.deepEqual(utils.stripMatchingElements({ a: "3", b: "c" }, [["a"], ["b"]]), {})
assert.deepEqual(utils.stripMatchingElements({ a: "3", b: "c" }, [["*"]]), {})
assert.deepEqual(utils.stripMatchingElements([1, 2], [["0"], [1]]), [])
assert.deepEqual(utils.stripMatchingElements([1, 2], [["*"]]), [])

assert.deepEqual(utils.stripMatchingElements([1, 2, 3], [[1]]), [1, 3])
assert.deepEqual(utils.stripMatchingElements({ a: "3", b: 4 }, [["a"]]), { b: 4 })
assert.deepEqual(utils.stripMatchingElements({ a: "3", b: { x: 3 } }, [["b", "x"]]), { a: "3", b: {} })
assert.deepEqual(utils.stripMatchingElements({ a: "3", b: [1, 2, 3], c: 4 }, [["b", 1], ["c"]]), { a: "3", b: [1, 3] })

assert.deepEqual(utils.merge(undefined, undefined), undefined)
assert.deepEqual(utils.merge([1], undefined), [1])
assert.deepEqual(utils.merge(1, undefined), 1)
assert.deepEqual(utils.merge(undefined, [2]), [2])
assert.deepEqual(utils.merge(undefined, 2), 2)
assert.deepEqual(utils.merge(1, 2), 2)
assert.deepEqual(utils.merge({a: 3}, 2), 2)
assert.deepEqual(utils.merge([1, 2, 3], [4, 5]), [4, 5, 3])
assert.deepEqual(utils.merge([1, 2, 3], [4, 5, 6, 7]), [4, 5, 6, 7])
assert.deepEqual(utils.merge([1, 2, 3], { x: 3 }), { x: 3 })
assert.deepEqual(utils.merge({ x: 3 }, [1, 2, 3]), [1, 2, 3])
assert.deepEqual(utils.merge({ y: { a: 4 }, z: { b: "1", d: "3" } }, { x: 3, z: { c: "2", d: 4 } }), { x: 3, y: { a: 4 }, z: { b: "1", c: "2", d: 4 } })
assert.deepEqual(utils.merge({ x: [1, 2], y: [1, 2] }, { x: [3, 4, 5], y: [3, 4] }, [["x"]]), { x: [1, 2, 3, 4, 5], y: [3, 4]})
